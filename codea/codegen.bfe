%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "tree.h"
#include "code_generator.h"
%}

%start stat
%term OP_RETURN=0 OP_ADD=1 OP_MUL=2 OP_OR=3 OP_GREATER=4 OP_NOT_EQUAL=5 OP_NOT=6 OP_NEG=7 OP_NUMBER=8 OP_ID=9 OP_PARAM_ID=10 OP_CLASS_VAR_ID=11 OP_NULL=12

%%
stat:   ret                             # 0 #
ret:    OP_RETURN(expr)                 # 1 #   writeReturnWithValue(bnode->regStor);
expr:   const                           # 1 #   writeMovev(bnode->value, bnode->regStor);
expr:   OP_ADD(expr, expr)              # 1 #   writeAdd(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_ADD(const, expr)             # 1 #   writeAddv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor);
const:  OP_ADD(const, const)            # 1 #   bnode->value = bnode->kids[0]->value + bnode->kids[1]->value; 
expr:   OP_ADD(expr, const)             # 1 #   writeAddv(bnode->kids[1]->value, bnode->kids[0]->regStor);
expr:   OP_MUL(expr, expr)              # 1 #   writeMul(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_MUL(const, expr)             # 1 #   writeMulv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor);
expr:   OP_MUL(expr, const)             # 1 #   writeMulv(bnode->kids[1]->value, bnode->kids[0]->regStor);
const:  OP_MUL(const, const)            # 1 #   bnode->value = bnode->kids[0]->value * bnode->kids[1]->value;
expr:   OP_OR(expr, expr)               # 1 #   writeOr(bnode->kids[1]->regStor, bnode->kids[0]->regStor);
expr:   OP_OR(const, expr)              # 1 #   writeOrv(bnode->kids[0]->value, bnode->kids[1]->regStor); writeMove(bnode->kids[1]->regStor, bnode->regStor); 
expr:   OP_OR(expr, const)              # 1 #   writeOrv(bnode->kids[1]->value, bnode->kids[0]->regStor);
const:  OP_OR(const, const)             # 1 #   bnode->value = bnode->kids[0]->value | bnode->kids[1]->value;
expr:   OP_GREATER(expr, expr)          # 1 #   writeRegGreaterReg(bnode->kids[0]->regStor, bnode->kids[1]->regStor, bnode->regStor);
expr:   OP_GREATER(expr, const)         # 1 #   writeRegGreaterV(bnode->kids[0]->regStor, bnode->kids[1]->value, bnode->regStor);
expr:   OP_GREATER(const, expr)         # 1 #   writeVGreaterReg(bnode->kids[0]->value, bnode->kids[1]->regStor, bnode->regStor);
const:  OP_GREATER(const, const)        # 0 #   if(bnode->kids[0]->value > bnode->kids[1]->value) { bnode->value = TRUE_VAL; } else { bnode->value = FALSE_VAL; } 
expr:   OP_NOT_EQUAL(expr, expr)        # 1 #   writeNotEquals(bnode->kids[0]->regStor,bnode->kids[1]->regStor,bnode->regStor);
expr:   OP_NOT_EQUAL(const, expr)       # 1 #   writeNotEqualsv(bnode->kids[0]->value,bnode->kids[1]->regStor,bnode->regStor);
expr:   OP_NOT_EQUAL(expr, const)       # 1 #   writeNotEqualsv(bnode->kids[1]->value,bnode->kids[0]->regStor,bnode->regStor);
const:  OP_NOT_EQUAL(const, const)      # 0 #   if(bnode->kids[0]->value != bnode->kids[1]->value) { bnode->value = TRUE_VAL; } else { bnode->value = FALSE_VAL; }
expr:   OP_NOT(expr)                    # 1 #   writeNot(bnode->regStor); 
const:  OP_NOT(const)                   # 0 #   bnode->value = ~bnode->kids[0]->value;
expr:   OP_NEG(expr)                    # 1 #   writeNeg(bnode->regStor); 
const:  OP_NEG(const)                   # 1 #   bnode->value = -bnode->kids[0]->value;
expr:   OP_ID                           # 1 #   /* nothing */
expr:   OP_PARAM_ID                     # 1 #   if (bnode->parameterIndex != -1) writeMove(getParameterRegister(bnode->parameterIndex), bnode->regStor);   
expr:   OP_CLASS_VAR_ID                 # 1 #   if (bnode->classVaroffset != -1) writeMoveForClassVar(bnode->classVaroffset, bnode->regStor);
const:  OP_NULL                         # 0 #   bnode->value = 0; /*TODO check if this is what they want */
const:  OP_NUMBER                       # 0 #   /* nothing */

%%
